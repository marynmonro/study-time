import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class Data {

    private String trainSetPath;
    private String testSetPath;
    private List<Iris> trainIrisList;
    private List<Iris> testIrisList;

    public Data(String trainSetPath) {
        this.trainSetPath = trainSetPath;
        trainIrisList = getTrainIrisList();
    }

    public Data(String trainSetPath, String testSetPath) {
        this.trainSetPath = trainSetPath;
        trainIrisList = getTrainIrisList();

        this.testSetPath = testSetPath;
        testIrisList = getTestIrisList();
    }

    public List<Iris> getTestData() {
        List<Iris> list = new ArrayList<>();
        try {
            BufferedReader br = new BufferedReader(new FileReader(new File(testSetPath)));

            String line;
            while ((line = br.readLine()) != null) {
                String[] splitLine = line.split(";");
                list.add(new Iris(
                        Double.parseDouble(splitLine[0]),
                        Double.parseDouble(splitLine[1]),
                        Double.parseDouble(splitLine[2]),
                        Double.parseDouble(splitLine[3]),
                        splitLine[4]
                ));
            }

        }catch (IOException e){
            e.printStackTrace();
        }
        return list;
    }

    public List<Iris> getTrainData() {
        List<Iris> list = new ArrayList<>();
        BufferedReader br = null;

        try {
            br = new BufferedReader(new FileReader(new File(trainSetPath)));
        String line;
        while ((line = br.readLine()) != null) {
            String[] splitLine = line.split(";");
            switch (splitLine[4]) {
                case "Iris-setosa":
                    list.add(new Iris( Double.parseDouble(splitLine[0]),
                            Double.parseDouble(splitLine[1]),
                            Double.parseDouble(splitLine[2]),
                            Double.parseDouble(splitLine[3]),
                            IrisType.SETOSA));
                    break;
                case "Iris-versicolor":
                    list.add(new Iris( Double.parseDouble(splitLine[0]),
                            Double.parseDouble(splitLine[1]),
                            Double.parseDouble(splitLine[2]),
                            Double.parseDouble(splitLine[3]),
                            IrisType.VERSICOLOR));
                    break;
                case "Iris-virginica":
                    list.add(new Iris( Double.parseDouble(splitLine[0]),
                            Double.parseDouble(splitLine[1]),
                            Double.parseDouble(splitLine[2]),
                            Double.parseDouble(splitLine[3]),
                            IrisType.VIRGINICA));
                    break;
            }
        }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return list;
    }

    public List<Iris> getTestIrisList() {
        return testIrisList;
    }

    public List<Iris> getTrainIrisList() {
        return trainIrisList;
    }
}
public class Iris {
    private double sepalLength;
    private double sepalWidth;
    private double petalLength;
    private double petalWidth;
    private IrisType type;
    private String name;

    public Iris(String string){
        String[] arr = string.split(";");
        this.sepalLength = Double.parseDouble(arr[0]);
        this.sepalWidth = Double.parseDouble(arr[1]);
        this.petalLength = Double.parseDouble(arr[2]);
        this.petalWidth = Double.parseDouble(arr[3]);
        if ( arr.length>4 ) name = arr[4];
    }

    public Iris(double sepalLength, double sepalWidth, double petalLength, double petalWidth) {
        this.sepalLength = sepalLength;
        this.sepalWidth = sepalWidth;
        this.petalLength = petalLength;
        this.petalWidth = petalWidth;
        type = null;
    }

    public Iris(double sepalLength, double sepalWidth, double petalLength, double petalWidth, String name) {
        this.sepalLength = sepalLength;
        this.sepalWidth = sepalWidth;
        this.petalLength = petalLength;
        this.petalWidth = petalWidth;
        this.name = name;
    }

    public Iris(double sepalLength, double sepalWidth, double petalLength, double petalWidth, IrisType type) {
        this.sepalLength = sepalLength;
        this.sepalWidth = sepalWidth;
        this.petalLength = petalLength;
        this.petalWidth = petalWidth;
        this.type = type;
    }


    public double getPetalLength() {
        return petalLength;
    }

    public double getPetalWidth() {
        return petalWidth;
    }

    public double getSepalLength() {
        return sepalLength;
    }

    public double getSepalWidth() {
        return sepalWidth;
    }

    public IrisType getType() {
        return type;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "{" +
                "sepalLength=" + sepalLength +
                ", sepalWidth=" + sepalWidth +
                ", petalLength=" + petalLength +
                ", petalWidth=" + petalWidth +
                '}';
    }
}

enum IrisType { SETOSA, VERSICOLOR, VIRGINICA }

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        System.out.println("k:"); // 6.1;3.5;1.4;0.2
        String k = in.nextLine();
        System.out.println("train-set:"); //train-set.csv
        String trainSetPath = in.nextLine();
        System.out.println("test-set:"); //test-set.csv
        String testSetPath = in.nextLine();

        KNN.TestSetKNN(new Data(trainSetPath, testSetPath));
        System.out.println(" - - - ");
        KNN.TestArgumentKNN(new Data(trainSetPath), new Iris(k));
    }
}

import java.util.*;
import java.util.List;

public class KNN {

    private Data data;
    private static int k = 105;

    private KNN(Data data) {
        this.data = data;
    }

    public Data getData() {
        return data;
    }

    public static void TestSetKNN(Data data) {
        KNN k = new KNN(data);
        for (Iris i : k.getData().getTestData()) {
            System.out.println( i.getName() + " " + k.testKKN(i));
        }
    }

    public static void TestArgumentKNN(Data data, Iris iris) {
        KNN irisKnn = new KNN(data);
        System.out.println("Hiperparametr: " + iris + " -> " + irisKnn.testKKN(iris));
    }

    private String testKKN(Iris iris) {

        List<Iris> closest = new ArrayList<>();
        List<Double> distances = new ArrayList<>();
        for (Iris j : data.getTrainData()) {
            double tmp = distance(iris, j);

            if (closest.size() >= k) {
                int index = 0;
                for (int l = 1; l < k; l++) {
                    if (distances.get(index) < distances.get(l)) index = l;
                }
                if (distances.get(index) > tmp) {
                    closest.set(index, j);
                    distances.set(index, tmp);
                }
            } else {
                closest.add(j);
                distances.add(tmp);
            }
        }

        Map<String, Integer> count = new HashMap<>();
        closest.forEach(i ->
        {
            if (count.containsKey(i.getType().name())) count.replace(i.getType().name(), count.get(i.getType().name()) + 1);
            else count.put(i.getType().name(), 1);
        });

        Map.Entry<String, Integer> maxEntry = null;
        for (Map.Entry<String, Integer> entry : count.entrySet()) {
            if (maxEntry == null || entry.getValue().compareTo(maxEntry.getValue()) > 0) maxEntry = entry;
        }

        double accuracy = 0.0;
        String result = "";
        if (maxEntry != null) {
            accuracy = maxEntry.getValue().doubleValue()/k;
            switch (maxEntry.getKey()) {
                case "SETOSA" -> result = "Iris-setosa";
                case "VERSICOLOR" -> result = "Iris-versicolour";
                case "VIRGINICA" -> result = "Iris-virginica";
            }
        }
        return result + " accurancy=" + accuracy;
    }

    private double distance(Iris x, Iris y) {
        return Math.sqrt(
                Math.pow(y.getPetalLength() - x.getPetalLength(), 2.0)
                        + Math.pow(y.getPetalWidth() - x.getPetalWidth(), 2.0)
                        + Math.pow(y.getSepalLength() - x.getSepalLength(), 2.0)
                        + Math.pow(y.getSepalWidth() - x.getSepalWidth(), 2.0)
        );
    }

}